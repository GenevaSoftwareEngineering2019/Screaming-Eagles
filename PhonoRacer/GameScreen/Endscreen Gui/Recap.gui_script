function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#", "hide_RecapScreen")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show_RecapScreen") then
		msg.post("#", "enable")
		self.active = true
		msg.post("default:/GamescreenProxy#GamescreenLoader", "Freeze")


		
		--Linking Session's phonograms to nodes
		local Q1Left = gui.get_node("Q1Left")
		gui.set_text(Q1Left, Session[1])
		local Q1Right = gui.get_node("Q1Right")
		gui.set_text(Q1Right, Session[2])

		if Picked[1] == Session[1] then
			if Picked[1] == Correct[1] then
				gui.set_color(Q1Left, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q1Left, vmath.vector3(1, 0, 0))
			end
		elseif Picked[1] == Session[2] then
			if Picked[1] == Correct[1] then
				gui.set_color(Q1Right, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q1Right, vmath.vector3(1, 0, 0))
			end
		end

		local Q2Left = gui.get_node("Q2Left")
		gui.set_text(Q2Left, Session[3])
		local Q2Right = gui.get_node("Q2Right")
		gui.set_text(Q2Right, Session[4])

		if Picked[2] == Session[3] then
			if Picked[2] == Correct[2] then
				gui.set_color(Q2Left, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q2Left, vmath.vector3(1, 0, 0))
			end
		elseif Picked[2] == Session[4] then
			if Picked[2] == Correct[2] then
				gui.set_color(Q2Right, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q2Right, vmath.vector3(1, 0, 0))
			end
		end

		local Q3Left = gui.get_node("Q3Left")
		gui.set_text(Q3Left, Session[5])
		local Q3Right = gui.get_node("Q3Right")
		gui.set_text(Q3Right, Session[6])

		if Picked[3] == Session[5] then
			if Picked[3] == Correct[3] then
				gui.set_color(Q3Left, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q3Left, vmath.vector3(1, 0, 0))
			end
		elseif Picked[3] == Session[6] then
			if Picked[3] == Correct[3] then
				gui.set_color(Q3Right, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q3Right, vmath.vector3(1, 0, 0))
			end
		end

		local Q4Left = gui.get_node("Q4Left")
		gui.set_text(Q4Left, Session[7])
		local Q4Right = gui.get_node("Q4Right")
		gui.set_text(Q4Right, Session[8])

		if Picked[4] == Session[7] then
			if Picked[4] == Correct[4] then
				gui.set_color(Q4Left, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q4Left, vmath.vector3(1, 0, 0))
			end
		elseif Picked[4] == Session[8] then
			if Picked[4] == Correct[4] then
				gui.set_color(Q4Right, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q4Right, vmath.vector3(1, 0, 0))
			end
		end

		local Q5Left = gui.get_node("Q5Left")
		gui.set_text(Q5Left, Session[9])
		local Q5Right = gui.get_node("Q5Right")
		gui.set_text(Q5Right, Session[10])

		if Picked[5] == Session[9] then
			if Picked[5] == Correct[5] then
				gui.set_color(Q5Left, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q5Left, vmath.vector3(1, 0, 0))
			end
		elseif Picked[5] == Session[10] then
			if Picked[5] == Correct[5] then
				gui.set_color(Q5Right, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q5Right, vmath.vector3(1, 0, 0))
			end
		end

		local Q6Left = gui.get_node("Q6Left")
		gui.set_text(Q6Left, Session[11])
		local Q6Right = gui.get_node("Q6Right")
		gui.set_text(Q6Right, Session[12])

		if Picked[6] == Session[11] then
			if Picked[6] == Correct[6] then
				gui.set_color(Q6Left, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q6Left, vmath.vector3(1, 0, 0))
			end
		elseif Picked[6] == Session[12] then
			if Picked[6] == Correct[6] then
				gui.set_color(Q6Right, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q6Right, vmath.vector3(1, 0, 0))
			end
		end

		local Q7Left = gui.get_node("Q7Left")
		gui.set_text(Q7Left, Session[13])
		local Q7Right = gui.get_node("Q7Right")
		gui.set_text(Q7Right, Session[14])

		if Picked[7] == Session[13] then
			if Picked[7] == Correct[7] then
				gui.set_color(Q7Left, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q7Left, vmath.vector3(1, 0, 0))
			end
		elseif Picked[7] == Session[14] then
			if Picked[7] == Correct[7] then
				gui.set_color(Q7Right, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q7Right, vmath.vector3(1, 0, 0))
			end
		end

		local Q8Left = gui.get_node("Q8Left")
		gui.set_text(Q8Left, Session[15])
		local Q8Right = gui.get_node("Q8Right")
		gui.set_text(Q8Right, Session[16])

		if Picked[8] == Session[15] then
			if Picked[8] == Correct[8] then
				gui.set_color(Q8Left, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q8Left, vmath.vector3(1, 0, 0))
			end
		elseif Picked[8] == Session[16] then
			if Picked[8] == Correct[8] then
				gui.set_color(Q8Right, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q8Right, vmath.vector3(1, 0, 0))
			end
		end

		local Q9Left = gui.get_node("Q9Left")
		gui.set_text(Q9Left, Session[17])
		local Q9Right = gui.get_node("Q9Right")
		gui.set_text(Q9Right, Session[18])

		if Picked[9] == Session[17] then
			if Picked[9] == Correct[9] then
				gui.set_color(Q9Left, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q9Left, vmath.vector3(1, 0, 0))
			end
		elseif Picked[9] == Session[18] then
			if Picked[9] == Correct[9] then
				gui.set_color(Q9Right, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q9Right, vmath.vector3(1, 0, 0))
			end
		end

		local Q10Left = gui.get_node("Q10Left")
		gui.set_text(Q10Left, Session[19])
		local Q10Right = gui.get_node("Q10Right")
		gui.set_text(Q10Right, Session[20])

		if Picked[10] == Session[19] then
			if Picked[10] == Correct[10] then
				gui.set_color(Q10Left, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q10Left, vmath.vector3(1, 0, 0))
			end
		elseif Picked[10] == Session[20] then
			if Picked[10] == Correct[10] then
				gui.set_color(Q10Right, vmath.vector3(0, .5, 0))
			else
				gui.set_color(Q10Right, vmath.vector3(1, 0, 0))
			end
		end
	elseif message_id == hash("hide_RecapScreen") then
		msg.post("#", "disable")
		self.active = false
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		local Return = gui.get_node("Return")
		if gui.pick_node(Return, action.x, action.y) then
			msg.post("default:/guis#start", "show_start")
			msg.post("default:/GamescreenProxy#GamescreenLoader", "disable")
			msg.post("default:/GamescreenProxy#GamescreenLoader", "unload")
		end
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
